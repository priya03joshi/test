//Input: nums = [1,2,3]
//Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

class Solution {
public:
    void backtrack(vector<vector<int>> &res,vector<int> nums,vector<int> &curr, vector<bool> visited){
        // base case , if current array's size is equal to original array's size then push it in final answer
        if(curr.size()==nums.size()){
            res.push_back(curr);
            return;
        }

        for(int i=0;i<nums.size();i++){
            if(visited[i]==true)continue;
            curr.push_back(nums[i]);
            visited[i] = true;
            backtrack(res,nums, curr,visited);
            curr.pop_back();
            visited[i] = false;
        } 
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        vector<bool> visited(nums.size(),false);
        vector<int> curr;
        backtrack(res ,nums,curr,visited);
        return res;
    }
};
